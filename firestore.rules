rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Função para verificar se o usuário é admin ou editor
    function isAdminOrEditor() {
      return request.auth != null && 
             (request.auth.token.role == 'admin' || 
              request.auth.token.role == 'editor');
    }

    // Regras para a coleção users
    match /users/{userId} {
      // Permitir leitura e escrita apenas para o proprietário do documento
      allow read, write: if request.auth != null && 
                request.auth.uid == userId;

      // Regras para a subcoleção addresses
      match /addresses/{addressId} {
        // Permitir leitura e escrita apenas para o proprietário do documento
        allow read, write: if request.auth != null && 
                request.auth.uid == userId;
      }
    }

    // Regras para a coleção boardgames
    match /boardgames/{boardgamesId} {
      // Qualquer usuário autenticado pode ler
      allow read: if true;

      // Apenas admin ou editor podem escrever
      allow write: if isAdminOrEditor();
    }

    // Regras para a coleção bgnames
    match /bgnames/{bgnamesId} {
      // Qualquer usuário autenticado pode ler
      allow read: if true;

      // Apenas admin ou editor podem escrever
      allow write: if isAdminOrEditor();
    }

    // Regras para a coleção bgnames
    match /favorites/{favoritesId} {
      // Qualquer usuário autenticado pode ler
      allow read: if true;

      // Apenas admin ou editor podem escrever
      allow write: if true;
    }

    // Regras para a coleção mechanics
    match /mechanics/{mechanicsId} {
      // Qualquer usuário autenticado pode ler
      allow read: if true;

      // Apenas admin ou editor podem escrever
      allow write: if isAdminOrEditor();
    }

    // Regras para a coleção ads
    match /ads/{adsId} {
      // Qualquer um pode ler
      allow read: if true;

      // Qualquer usuário logado pode criar uma nova ad.
      allow create: if request.auth != null && 
                request.auth.uid == request.resource.data.ownerId;
      // Apenas o proprietário do anúncio pode escrever
      allow update, delete: if request.auth != null && 
                request.auth.uid == resource.data.ownerId;

      match /messages/{messageId} {
        allow read: if request.auth != null && 
                (request.auth.uid == resource.data.senderId || 
                 request.auth.uid == resource.data.ownerId);

        // Apenas o remetente pode criar uma mensagem
        allow update: if request.auth != null;

        // Somente o destinatário e o remetente podem atualizar 'read' ou 'answered'
        allow update: if request.auth != null &&
                (request.auth.uid == resource.data.senderId ||
                 request.auth.uid == resource.data.ownerId) &&
                (request.resource.data.keys().hasOnly(['read', 'answered']));
    }
  }
}
